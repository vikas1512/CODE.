# Import necessary libraries
import pandas as pd
from surprise import Dataset, Reader, SVD
from surprise.model_selection import train_test_split
from surprise import accuracy

# Load a sample dataset
# Replace 'ratings.csv' with your dataset file
# The dataset should have columns 'userId', 'movieId', and 'rating'
data = pd.read_csv('ratings.csv')

# Prepare the data for the Surprise library
reader = Reader(rating_scale=(1, 5))  # Adjust rating scale if necessary
data = Dataset.load_from_df(data[['userId', 'movieId', 'rating']], reader)

# Split the data into training and testing sets
trainset, testset = train_test_split(data, test_size=0.25)

# Use the SVD algorithm for collaborative filtering
model = SVD()

# Train the model on the training set
model.fit(trainset)

# Evaluate the model on the test set
predictions = model.test(testset)
rmse = accuracy.rmse(predictions)
print(f"RMSE of the model: {rmse}")

# Function to get movie recommendations for a specific user
def get_recommendations(user_id, model, trainset, num_recommendations=5):
    """
    Get top movie recommendations for a given user.
    Args:
    - user_id (int): The ID of the user.
    - model (Surprise model): Trained recommendation model.
    - trainset (Surprise Trainset): The training data set.
    - num_recommendations (int): Number of recommendations to return.
    
    Returns:
    - List of tuples (movie_id, estimated_rating).
    """
    # Get all movie IDs in the training set
    all_movie_ids = {iid for (_, iid, _) in trainset.all_ratings()}
    
    # Get the movies already rated by the user
    try:
        user_movie_ids = {iid for (iid, _) in trainset.ur[trainset.to_inner_uid(user_id)]}
    except ValueError:
        print("User not found in training data.")
        return []

    # Find movies not yet rated by the user
    unrated_movies = all_movie_ids - user_movie_ids
    
    # Predict ratings for unrated movies and sort by estimated rating
    recommendations = [(movie_id, model.predict(user_id, movie_id).est) for movie_id in unrated_movies]
    recommendations.sort(key=lambda x: x[1], reverse=True)
    
    return recommendations[:num_recommendations]

# Example: Get recommendations for a specific user (e.g., user_id = 1)
user_id = 1
recommended_movies = get_recommendations(user_id, model, trainset)
print("Recommended movies for user", user_id, ":", recommended_movies)

# Print each recommended movie with estimated rating
for movie_id, est_rating in recommended_movies:
    print(f"Movie ID: {movie_id}, Estimated Rating: {est_rating}")
